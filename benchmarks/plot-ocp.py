import contextlib
import json
import sys
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import numpy as np

filename = "ocp.json"
with contextlib.suppress(IndexError):
    filename = sys.argv[1]

# Load the JSON data
with open(filename) as f:
    data = json.load(f)

stat = "median"
metric = "real_time"  # or "cpu_time"

# Create a DataFrame from the benchmarks
df = pd.DataFrame(data["benchmarks"])
df = df[df["aggregate_name"].isna()]  # Drop aggregates generated by gbench
df_runs = df[["run_name", "real_time", "cpu_time"]].groupby("run_name")
df = df_runs.aggregate([stat, "min", "max"])

# Extract the ny parameter for the x-axis
df["run_name"] = df.index
df["prcnt"] = df["run_name"].str.extract(r"/prcnt:(\d+)(?:/|$)").astype(float)
# Extract the name
df["func_name"] = df["run_name"].apply(lambda x: x.split("/", 1)[0])
df = df.sort_values(by=["func_name", "prcnt"])
df["cpu_usage"] = df["cpu_time"][stat] / df["real_time"][stat]
del df["run_name"]
print(df)
functions = df["func_name"].unique()
# Prepare data for plotting
prcnts = df["prcnt"].drop_duplicates()
prcnt = np.unique(prcnts)
unit = data["benchmarks"][0]["time_unit"]

# Plotting options
plot_opts = {
    "bm_factor_schur": dict(
        label="Factor (Schur)",
        linestyle="--",
        color="tab:blue",
        alpha=0.8,
        linewidth=0.8,
    ),
    "bm_update_schur": dict(
        label="Update (Schur)",
        linestyle="--",
        color="tab:green",
        marker="x",
        markersize=4,
        alpha=0.8,
        linewidth=0.8,
    ),
    "bm_factor_riccati": dict(
        label="Factor (Riccati)",
        linestyle="-",
        color="tab:blue",
    ),
    "bm_update_riccati": dict(
        label="Update (Riccati)",
        linestyle="-",
        color="tab:green",
        marker=".",
        markersize=7,
        mfc="white",
    ),
}

fig, ax = plt.subplots(1, 1)
for function, opts in plot_opts.items():
    function_df = df[df["func_name"] == function]
    if function_df.empty:
        continue
    print(function)
    if function_df["prcnt"].notna().any():
        ax.plot(function_df["prcnt"], 1e-3 * function_df[metric][stat].array, **opts)
        ax.fill_between(
            function_df["prcnt"],
            1e-3 * function_df[metric]["min"].array,
            1e-3 * function_df[metric]["max"].array,
            **{k: v for k, v in opts.items() if k in {"color"}},
            alpha=0.25
        )
    else:
        xs = [0, max(prcnt) + 1]
        ax.plot(xs, [1e-3 * function_df[metric][stat].item()] * 2, **opts)
        ax.fill_between(
            xs,
            [1e-3 * function_df[metric]["min"].item()] * 2,
            [1e-3 * function_df[metric]["max"].item()] * 2,
            **{k: v for k, v in opts.items() if k in {"color"}},
            alpha=0.25
        )
ax.legend(loc="upper left")
ax.set_title("OCP factorization and update run times")
ax.set_xlim(0, max(prcnt) + 0.99)
ax.set_xlabel("Percentage of changing inequality constraints")
ax.set_ylabel(r"Run time [$\mu\mathrm{s}$]")
ax.xaxis.set_major_formatter(FuncFormatter(lambda x, _: f"{x:.0f}%"))
assert unit == "ns"
ax.set_ylim(0, None)
plt.savefig(filename + ".timings.pdf")

plt.show()
